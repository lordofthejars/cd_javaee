apply plugin: 'war'
apply plugin: 'pmd'
apply plugin: 'jacoco'
apply plugin: 'maven-publish'

group = 'org.superbiz'
version = '1.0-SNAPSHOT'

sourceCompatibility = 1.7
targetCompatibility = 1.7


repositories {
    mavenCentral()
}

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "io.spring.gradle:dependency-management-plugin:0.5.3.RELEASE"
        classpath 'org.unbroken-dome.gradle-plugins:gradle-testsets-plugin:1.2.0'
    }
}

apply plugin: "io.spring.dependency-management"
apply plugin: 'org.unbroken-dome.test-sets'


dependencyManagement {
    imports {
        mavenBom 'org.arquillian:arquillian-universe:1.0.0.Alpha1'
    }
}

dependencies {
    testCompile group: 'org.arquillian.universe', name: 'arquillian-junit', ext: 'pom'
    testCompile group: 'org.apache.openejb', name: 'arquillian-tomee-embedded', version:'1.7.2'
    testCompile group: 'org.apache.openejb', name: 'tomee-jaxrs', version:'1.7.2'
    testCompile group: 'junit', name: 'junit', version:'4.12'
    providedCompile group: 'org.apache.openejb', name: 'javaee-api', version:'6.0-6'
}

// ** Integration/Slow tests

testSets {
    integrationTests
}


// ** PMD Configuration **

pmd {
    ignoreFailures = true
    ruleSets = [
            "basic"
    ]
}

// ** JaCoCo configuration **

jacoco {
    toolVersion = "0.7.5.201505241946"
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
    }
}

check.dependsOn integrationTests
integrationTests.mustRunAfter test

apply from: "$rootDir/gradle/configuring.gradle"

// Apply Versioning
allprojects {
    apply from: "$rootDir/gradle/versioning.gradle"
    ext.config = rootProject.ext.parsedConfig
}


// Generating reports for integration tests
task jacocoRootTestReport(type: JacocoReport) {
    sourceSets sourceSets.main
    executionData files([
            "$buildDir/jacoco/test.exec",
            "$buildDir/jacoco/integrationTests.exec"
    ])
    reports {
        xml.enabled true
        csv.enabled false
    }    
}

task createBuildInfoFile << {
    def buildInfoFile = new File("$buildDir/build-info.properties")
    Properties props = new Properties()
    props.setProperty('version', project.version.toString())
    props.setProperty('timestamp', project.buildTimestamp)
    props.store(buildInfoFile.newWriter(), null)
}


// Create Binary

war {
    dependsOn createBuildInfoFile
    from(buildDir) {
        include 'build-info.properties'
        into('WEB-INF/classes')
    }
}

// Publish Binary

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
}

task javadocJar (type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
}

ext.repoUrl = "$config.binaryRepository.url/$config.binaryRepository.name"

publishing {
    publications {
        webApp(MavenPublication){
            from components.web
            artifact sourceJar {
                classifier "sources"
            }
            artifact javadocJar {
                classifier "javadoc"
            }
        }
    }

    // Local directory is used for simplification

    repositories {
        maven {
            url repoUrl
        }
    }
}

// Deploy to environment

